dir.create("Output_test")
Load_GeneSet <- function(File, InputFile, GenesetName){
#Open the gmt or csv file:
if(File=="gmt"){
gmtfile <- InputFile
genesets = GSEABase::getGmt(con = gmtfile)
genesets = unlist(genesets)
gene_to_term =plyr::ldply(genesets,function(geneset){
temp <- geneIds(geneset)
temp2 <- setName(geneset)
temp3 <- as.data.frame(cbind(temp,rep(temp2,length(temp))))
},.progress = plyr::progress_text())
names(gene_to_term) <- c("gene","term")
return(gene_to_term[complete.cases(gene_to_term),])
DF <- gene_to_term
}
else if(File=="csv"){
DF <- read.csv(paste(InputFile))
}
else{
paste("File is either gmt or csv and InputFile type needs to match File")
}
#Add the number of genes present in each pathway
DF$Count <- 1
DF_Mean <-dplyr::select_if(DF, is.numeric)%>%
group_by(DF$term) %>%
summarise(funs(sum))%>%
rename("DF$term"="term",
"Count"="Genes_in_Pathway")
DF <- merge(x= DF[,-3], y=DF_Mean,by="term", all.x=TRUE)
#Return and save the DF as .csv
dir.create("Output_GeneSets")
write.csv(DF, paste("Output_GeneSets/", GenesetName, ".csv"))
Output <- DF
}
Load_GeneSet <- function(File, InputFile, GenesetName){
#Open the gmt or csv file:
if(File=="gmt"){
library(GSEABase)
gmtfile <- InputFile
genesets = GSEABase::getGmt(con = gmtfile)
genesets = unlist(genesets)
gene_to_term =plyr::ldply(genesets,function(geneset){
temp <- geneIds(geneset)
temp2 <- setName(geneset)
temp3 <- as.data.frame(cbind(temp,rep(temp2,length(temp))))
},.progress = plyr::progress_text())
names(gene_to_term) <- c("gene","term")
return(gene_to_term[complete.cases(gene_to_term),])
DF <- gene_to_term
}
else if(File=="csv"){
DF <- read.csv(paste(InputFile))
}
else{
paste("File is either gmt or csv and InputFile type needs to match File")
}
#Add the number of genes present in each pathway
DF$Count <- 1
DF_Mean <-dplyr::select_if(DF, is.numeric)%>%
group_by(DF$term) %>%
summarise(funs(sum))%>%
rename("DF$term"="term",
"Count"="Genes_in_Pathway")
DF <- merge(x= DF[,-3], y=DF_Mean,by="term", all.x=TRUE)
#Return and save the DF as .csv
dir.create("Output_GeneSets")
write.csv(DF, paste("Output_GeneSets/", GenesetName, ".csv"))
Output <- DF
}
MetabolicSig <-Load_GeneSet(File="csv",
InputFile="Input_GeneSets/41467_2016_BFncomms13041_MOESM340_ESM.csv",
GenesetName="MetabolicSignature")
library(tidyverse)
Load_GeneSet <- function(File, InputFile, GenesetName){
#Open the gmt or csv file:
if(File=="gmt"){
library(GSEABase)
gmtfile <- InputFile
genesets = GSEABase::getGmt(con = gmtfile)
genesets = unlist(genesets)
gene_to_term =plyr::ldply(genesets,function(geneset){
temp <- geneIds(geneset)
temp2 <- setName(geneset)
temp3 <- as.data.frame(cbind(temp,rep(temp2,length(temp))))
},.progress = plyr::progress_text())
names(gene_to_term) <- c("gene","term")
return(gene_to_term[complete.cases(gene_to_term),])
DF <- gene_to_term
}
else if(File=="csv"){
DF <- read.csv(paste(InputFile))
}
else{
paste("File is either gmt or csv and InputFile type needs to match File")
}
#Add the number of genes present in each pathway
DF$Count <- 1
DF_Mean <-dplyr::select_if(DF, is.numeric)%>%
group_by(DF$term) %>%
summarise(funs(sum))%>%
rename("DF$term"="term",
"Count"="Genes_in_Pathway")
DF <- merge(x= DF[,-3], y=DF_Mean,by="term", all.x=TRUE)
#Return and save the DF as .csv
dir.create("Output_GeneSets")
write.csv(DF, paste("Output_GeneSets/", GenesetName, ".csv"))
Output <- DF
}
MetabolicSig <-Load_GeneSet(File="csv",
InputFile="Input_GeneSets/41467_2016_BFncomms13041_MOESM340_ESM.csv",
GenesetName="MetabolicSignature")
Load_GeneSet <- function(File, InputFile, GenesetName){
#Open the gmt or csv file:
if(File=="gmt"){
library(GSEABase)
gmtfile <- InputFile
genesets = GSEABase::getGmt(con = gmtfile)
genesets = unlist(genesets)
gene_to_term =plyr::ldply(genesets,function(geneset){
temp <- geneIds(geneset)
temp2 <- setName(geneset)
temp3 <- as.data.frame(cbind(temp,rep(temp2,length(temp))))
},.progress = plyr::progress_text())
names(gene_to_term) <- c("gene","term")
return(gene_to_term[complete.cases(gene_to_term),])
DF <- gene_to_term
}
else if(File=="csv"){
DF <- read.csv(paste(InputFile))
}
else{
paste("File is either gmt or csv and InputFile type needs to match File")
}
#Add the number of genes present in each pathway
DF$Count <- 1
DF_Mean <-dplyr::select_if(DF, is.numeric)%>%
group_by(DF$term) %>%
summarise(sum)%>%
rename("DF$term"="term",
"Count"="Genes_in_Pathway")
DF <- merge(x= DF[,-3], y=DF_Mean,by="term", all.x=TRUE)
#Return and save the DF as .csv
dir.create("Output_GeneSets")
write.csv(DF, paste("Output_GeneSets/", GenesetName, ".csv"))
Output <- DF
}
MetabolicSig <-Load_GeneSet(File="csv",
InputFile="Input_GeneSets/41467_2016_BFncomms13041_MOESM340_ESM.csv",
GenesetName="MetabolicSignature")
InputFile <- "Input_GeneSets/41467_2016_BFncomms13041_MOESM340_ESM.csv"
DF <- read.csv(paste(InputFile))
DF$Count <- 1
View(DF)
DF_Mean <-dplyr::select_if(DF, is.numeric)%>%
group_by(DF$term) %>%
summarise(funs(sum))%>%
rename("DF$term"="term",
"Count"="Genes_in_Pathway")
DF_Mean <- aggregate(DF$Count, by=list(term=DF$term), FUN=sum)
View(DF_Mean)
DF_Mean <- aggregate(DF$Count, by=list(term=DF$term), FUN=sum)%>%
rename("x"="Genes_in_Pathway")
DF_Mean <- aggregate(DF$Count, by=list(term=DF$term), FUN=sum)%>%
rename("X"="Genes_in_Pathway")
DF_Mean <- aggregate(DF$Count, by=list(term=DF$term), FUN=sum)%>%
rename("Genes_in_Pathway"="x")
Load_GeneSet <- function(File, InputFile, GenesetName){
#Open the gmt or csv file:
if(File=="gmt"){
library(GSEABase)
gmtfile <- InputFile
genesets = GSEABase::getGmt(con = gmtfile)
genesets = unlist(genesets)
gene_to_term =plyr::ldply(genesets,function(geneset){
temp <- geneIds(geneset)
temp2 <- setName(geneset)
temp3 <- as.data.frame(cbind(temp,rep(temp2,length(temp))))
},.progress = plyr::progress_text())
names(gene_to_term) <- c("gene","term")
return(gene_to_term[complete.cases(gene_to_term),])
DF <- gene_to_term
}
else if(File=="csv"){
DF <- read.csv(paste(InputFile))
}
else{
paste("File is either gmt or csv and InputFile type needs to match File")
}
#Add the number of genes present in each pathway
DF$Count <- 1
DF_Mean <- aggregate(DF$Count, by=list(term=DF$term), FUN=sum)%>%
rename("Genes_in_Pathway"="x")
DF <- merge(x= DF[,-3], y=DF_Mean,by="term", all.x=TRUE)
#Return and save the DF as .csv
dir.create("Output_GeneSets")
write.csv(DF, paste("Output_GeneSets/", GenesetName, ".csv"))
Output <- DF
}
MetabolicSig <-Load_GeneSet(File="csv",
InputFile="Input_GeneSets/41467_2016_BFncomms13041_MOESM340_ESM.csv",
GenesetName="MetabolicSignature")
View(MetabolicSig)
Correction_Metabolic_Signature <- read.csv("Input_GeneSets/41467_2016_BFncomms13041_MOESM341_ESM.csv")%>%
mutate(Unique = case_when(associated_Pathways =="1" ~ 'Unique',
TRUE ~ 'In multiple Pathways'))
MetabolicSig <-merge(x=MetabolicSig, y=Correction_Metabolic_Signature, by.x ="gene", by.y="external_gene_name", all.x=TRUE)
View(MetabolicSig)
