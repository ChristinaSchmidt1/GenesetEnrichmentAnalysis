---
title: "GSEA_Visualisation"
author: "Christina Schmidt"
date: '2022-08-04'
output:
  html_document:
    toc: yes
    toc_depth: 3
    toc_float: yes
  pdf_document:
    toc: yes
    toc_depth: '3'
editor_options:
  chunk_output_type: console
---

```{r }
## Establish function 
# @param DoGSEA: TRUE or FALSE weather GSEA analysis should be performed. If TRUE, "InputData" and "GeneSet" has to be provided. If FALSE, "FileName" of GSEA results has to be provided. The file needs to be a .csv file.
# @param InputData: Must include column "Symbol" with gene names, column "rank" with numeric values used for the ranking (either Log2FC or tval), column "p.adj with the adjusted p-value and column "Log2FC" with the Log2FC.
# @param GeneSet: The gene set you want to use to perform the GSEA.To run multiple gene sets together use Pathways=rbind(KEGG, Reactome, Biocarta, Hallmarks)
# @param Save: Parameter that defines if the GSEA output DF is saved. TRUE or FALSE.
# @param FileName: "FileName.csv". Only needed if Save = TRUE.
# @param VolcanoPlots: Parameter that defines if VolcanoPlots should be made. TRUE or FALSE
# @param VolcanoPlotColour: "Unique" or "Standard" or "Both". "Unique" refers to Volcano plots colour coded for genes that are unique in this pathway or part of multiple pathways. "Standard" colour codes Volcano plots depending on significance and Log2FC. If you want to plot both option choose "Both".
#@Param VolcanoPlot_p.adj:
#@Param VolcanoPlot_NES:
#@Param VolcanoPlot_Percentage:
#@param LollipopGraphs: Parameter that defines if Lollipop graph should be made. TRUE or FALSE
#@param Lollipop_p.adj: Parameter for p.adj cutoff that will be included on the lollipop graph.Default 0.25.
#@param Lollipop_NES: Parameter for NES cutoff that will be included on the lollipop graph. Default 0.5.
#@Param Lollipop_Percentage:
#@Param LollipopName

DoGSEA_Viz <-function(DoGSEA=TRUE, InputData, GeneSet, Save=TRUE, FileName, VolcanoPlots=TRUE, VolcanoPlotColour="Standard", VolcanoPlot_p.adj=0.25,VolcanoPlot_NES=1,VolcanoPlot_Percentage=50, LollipopGraphs=TRUE, Lollipop_p.adj =0.25, Lollipop_NES = 1, Lollipop_Percentage=50, LollipopName="X"){
  if(DoGSEA==TRUE){
    #Load libraries
    library(fgsea)
  
    #Prepare ranked data matrix for GSEA:
    Column_Gene <- as.character(InputData$Symbol)#Ensembl name
    Column_rank <- as.numeric(InputData$rank)
    MyData_Extracted <- data.frame(cbind(Column_Gene, Column_rank), stringsAsFactors = F)
    MyData_Extracted$Column_rank <- as.numeric(MyData_Extracted$Column_rank)
    rank <- as.numeric(MyData_Extracted$Column_rank)#Make the data into a vector
    names(rank) <- MyData_Extracted$Column_Gene
  
    #Load the gene sets
    pathways <- GeneSet
    pathway_list <- list()
    for(pathway in unique(pathways$term)){
      pathway_list[[pathway]] <- as.character(pathways$gene[pathways$term == pathway])
    } 
  
    #Run the GSEA analysis
    gsea_result <- fgsea(pathways = pathway_list, stats = rank, nperm = 1000)
  
    #Add pathway information (% of genes in pathway detected)
    gsea_result <- merge(x= gsea_result, y=pathways[,-2],by.x="pathway", by.y="term", all.x=TRUE)
    gsea_result$Percentage_of_Pathway_detected <-round(((gsea_result$size/gsea_result$Genes_in_Pathway)*100),digits=2)
    gsea_result <- gsea_result[!duplicated(gsea_result$pathway),]
    
    #Safe file and output results
    if(Save==FALSE){
      Output <- gsea_result
    }
    else if(Save==TRUE){
    dir.create("OutputDataTable")
    write_csv(gsea_result[,c(-8)], file=paste("OutputDataTable/",FileName))
    Output <- gsea_result
    }
    else{
      paste("Please select Save=TRUE or Save=FALSE")
    }
  }
  else if (DoGSEA==FALSE){
    gsea_result <-read.csv(FileName)
  }
  else{
    paste("Choose DoGSEA= TRUE or DoGSEA=FALSE")
  }
  
  #Do individual Volcano plots of each term in the gene sets
  if(VolcanoPlots==TRUE & VolcanoPlotColour=="Standard"){
    library(ggrepel)
    library(EnhancedVolcano)
    
    #Select the pathways to plot:
    Terms <- gsea_result[,c(-8)]%>%
      subset(padj <= VolcanoPlot_p.adj & (NES>= VolcanoPlot_NES | NES <= -VolcanoPlot_NES) & Percentage_of_Pathway_detected >= VolcanoPlot_Percentage)
    Terms <- Terms$pathway
    
    for(i in Terms){
      Pathway <- subset(GeneSet, term == paste(i))
      Volcano1  <- merge(x=Pathway,y=InputData, by.x="gene", by.y="Symbol", all.x=TRUE)%>%
        na.omit()
      GSEA_Score <- subset(gsea_result[,c(-8)], pathway == paste(i))
      if(nrow(Volcano1)>=1){
        VolcanoPlot <- EnhancedVolcano (Volcano1,
                                        lab = Volcano1$gene,#gene name
                                        x = "Log2FC",#Log2FC
                                        y = "p.adj",#p-value or q-value
                                        xlab = "Log2FC",
                                        ylab = bquote(~-Log[10]~`p.adj`),#(~-Log[10]~adjusted~italic(P))
                                        pCutoff = 0.05,
                                        FCcutoff = 0.5,
                                        pointSize = 3,
                                        labSize = 2,
                                        titleLabSize = 16,
                                        col=c("#00132D", "#698198", "#698198", "#C9A959"),
                                        legendLabels=c('No Change','p.adj > 0.05 or','-0.5 < Log2FC <0.5','-0.5 > Log2FC > 0.5 & p.adj <0.05'),
                                        colAlpha = 0.8,
                                        title=paste(i),
                                        subtitle=paste("NES=",GSEA_Score$NES, ", p.adj=",GSEA_Score$padj),
                                        caption = paste0("total = ", nrow(Volcano1), " genes of ", nrow(Pathway), " genes in pathway"),
                                        xlim = c((((Reduce(min,Volcano1$Log2FC))))-0.5,(((Reduce(max,Volcano1$Log2FC))))+0.5),
                                        ylim = c(0,((-log10(Reduce(min,Volcano1$p.adj))))+0.1),
                                        cutoffLineType = "dashed",
                                        cutoffLineCol = "black",
                                        cutoffLineWidth = 0.5,
                                        legendPosition = 'right',
                                        legendLabSize = 12,
                                        legendIconSize = 5.0)
        dir.create("OutputFig")
        dir.create("OutputFig/GSEA_VP_S")
        ggsave(file=paste("OutputFig/GSEA_VP_S/", i, ".pdf"), plot=VolcanoPlot, width=10, height=8)
        plot(VolcanoPlot)
      }
    }
  }
  else if(VolcanoPlots==TRUE & VolcanoPlotColour=="Unique"){
    library(ggrepel)
    library(EnhancedVolcano)
    
   #Select the pathways to plot:
    Terms <- gsea_result[,c(-8)]%>%
      subset(padj <= VolcanoPlot_p.adj & (NES>= VolcanoPlot_NES | NES <= -VolcanoPlot_NES) & Percentage_of_Pathway_detected >= VolcanoPlot_Percentage)
    Terms <- Terms$pathway
    
    for(i in Terms){
      GeneSet_C <- pathways
      for(k in 1:length(GeneSet_C$gene)){
      GeneSet_C$associated_Pathways[k] <- sum((GeneSet_C$gene==GeneSet_C$gene[k]))
      }
      GeneSet_C <-GeneSet_C%>% 
        mutate(Unique = case_when(associated_Pathways =="1" ~ 'Unique',
                                  TRUE ~ 'In multiple Pathways'))
      Pathway <- subset(GeneSet_C, term == paste(i))
      Volcano1  <- merge(x=Pathway,y=InputData, by.x="gene", by.y="Symbol", all.x=TRUE)%>%
        na.omit()
      GSEA_Score <- subset(gsea_result[,c(-8)], pathway == paste(i))
      
      #Prepare the colour scheme and symbols:
      keyvals <- ifelse(
        Volcano1$Unique == "Unique", "red",
        ifelse(Volcano1$Unique == "In multiple Pathways", "blue",
              "black"))
      names(keyvals)[is.na(keyvals)] <- "black"
      names(keyvals)[keyvals == 'black'] <- "NA"
      names(keyvals)[keyvals == 'red'] <- "Unique"
      names(keyvals)[keyvals == 'blue'] <- "In multiple Pathways"

      keyvals.shape <- ifelse(
      Volcano1$Unique == "Unique", 19,
        ifelse(Volcano1$Unique == "In multiple Pathways", 18, 3))
      keyvals.shape[is.na(keyvals.shape)] <- 3
      names(keyvals.shape)[keyvals.shape == 3] <- 'NA'
      names(keyvals.shape)[keyvals.shape == 19] <- 'Unique'
      names(keyvals.shape)[keyvals.shape == 18] <- 'In multiple Pathways'
      
      if(nrow(Volcano1)>=1){
        VolcanoPlot <- EnhancedVolcano (Volcano1,
                                        lab = Volcano1$gene,#gene name
                                        x = "Log2FC",#Log2FC
                                        y = "p.adj",#p-value or q-value
                                        xlab = "Log2FC",
                                        ylab = bquote(~-Log[10]~`p.adj`),#(~-Log[10]~adjusted~italic(P))
                                        pCutoff = 0.05,
                                        FCcutoff = 0.5,
                                        pointSize = 3,
                                        labSize = 2,
                                        titleLabSize = 16,
                                        shapeCustom = keyvals.shape,
                                        colCustom = keyvals,
                                        colAlpha = 0.5,
                                        title=paste(i),
                                        subtitle=paste("NES=",GSEA_Score$NES, ", p.adj=",GSEA_Score$padj),
                                        caption = paste0("total = ", nrow(Volcano1), " genes of ", nrow(Pathway), " genes in pathway"),
                                        xlim = c((((Reduce(min,Volcano1$Log2FC))))-0.5,(((Reduce(max,Volcano1$Log2FC))))+0.5),
                                        ylim = c(0,((-log10(Reduce(min,Volcano1$p.adj))))+0.1),
                                        cutoffLineType = "dashed",
                                        cutoffLineCol = "black",
                                        cutoffLineWidth = 0.5,
                                        legendPosition = 'right',
                                        legendLabSize = 12,
                                        legendIconSize = 5.0)
        dir.create("OutputFig")
        dir.create("OutputFig/GSEA_VP_U")
        ggsave(file=paste("OutputFig/GSEA_VP_U/", i, ".pdf"), plot=VolcanoPlot, width=10, height=8)
        plot(VolcanoPlot)
      }
    }
  }
   if(VolcanoPlots==TRUE & VolcanoPlotColour=="Both"){
    library(ggrepel)
    library(EnhancedVolcano)
    
    #Make the Standard Volcano plots:
    #Select the pathways to plot:
    Terms <- gsea_result[,c(-8)]%>%
      subset(padj <= VolcanoPlot_p.adj & (NES>= VolcanoPlot_NES | NES <= -VolcanoPlot_NES) & Percentage_of_Pathway_detected >= VolcanoPlot_Percentage)
    Terms <- Terms$pathway
    
    for(i in Terms){
      Pathway <- subset(GeneSet, term == paste(i))
      Volcano1  <- merge(x=Pathway,y=InputData, by.x="gene", by.y="Symbol", all.x=TRUE)%>%
        na.omit()
      GSEA_Score <- subset(gsea_result[,c(-8)], pathway == paste(i))
      if(nrow(Volcano1)>=1){
        VolcanoPlot <- EnhancedVolcano (Volcano1,
                                        lab = Volcano1$gene,#gene name
                                        x = "Log2FC",#Log2FC
                                        y = "p.adj",#p-value or q-value
                                        xlab = "Log2FC",
                                        ylab = bquote(~-Log[10]~`p.adj`),#(~-Log[10]~adjusted~italic(P))
                                        pCutoff = 0.05,
                                        FCcutoff = 0.5,
                                        pointSize = 3,
                                        labSize = 2,
                                        titleLabSize = 16,
                                        col=c("#00132D", "#698198", "#698198", "#C9A959"),
                                        legendLabels=c('No Change','p.adj > 0.05 or','-0.5 < Log2FC <0.5','-0.5 > Log2FC > 0.5 & p.adj <0.05'),
                                        colAlpha = 0.8,
                                        title=paste(i),
                                        subtitle=paste("NES=",GSEA_Score$NES, ", p.adj=",GSEA_Score$padj),
                                        caption = paste0("total = ", nrow(Volcano1), " genes of ", nrow(Pathway), " genes in pathway"),
                                        xlim = c((((Reduce(min,Volcano1$Log2FC))))-0.5,(((Reduce(max,Volcano1$Log2FC))))+0.5),
                                        ylim = c(0,((-log10(Reduce(min,Volcano1$p.adj))))+0.1),
                                        cutoffLineType = "dashed",
                                        cutoffLineCol = "black",
                                        cutoffLineWidth = 0.5,
                                        legendPosition = 'right',
                                        legendLabSize = 12,
                                        legendIconSize = 5.0)
        dir.create("OutputFig")
        dir.create("OutputFig/GSEA_VP_S")
        ggsave(file=paste("OutputFig/GSEA_VP_S/", i, ".pdf"), plot=VolcanoPlot, width=10, height=8)
        plot(VolcanoPlot)
        
      }
    }
     #Make the Unique Volcano plots
    #Select the pathways to plot:
    Terms <- gsea_result[,c(-8)]%>%
      subset(padj <= VolcanoPlot_p.adj & (NES>= VolcanoPlot_NES | NES <= -VolcanoPlot_NES) & Percentage_of_Pathway_detected >= VolcanoPlot_Percentage)
    Terms <- Terms$pathway
    
    for(i in Terms){
      GeneSet_C <- pathways
      for(k in 1:length(GeneSet_C$gene)){
      GeneSet_C$associated_Pathways[k] <- sum((GeneSet_C$gene==GeneSet_C$gene[k]))
      }
      GeneSet_C <-GeneSet_C%>% 
        mutate(Unique = case_when(associated_Pathways =="1" ~ 'Unique',
                                  TRUE ~ 'In multiple Pathways'))
      Pathway <- subset(GeneSet_C, term == paste(i))
      Volcano1  <- merge(x=Pathway,y=InputData, by.x="gene", by.y="Symbol", all.x=TRUE)%>%
        na.omit()
      GSEA_Score <- subset(gsea_result[,c(-8)], pathway == paste(i))
      
      #Prepare the colour scheme and symbols:
      keyvals <- ifelse(
        Volcano1$Unique == "Unique", "red",
        ifelse(Volcano1$Unique == "In multiple Pathways", "blue",
              "black"))
      names(keyvals)[is.na(keyvals)] <- "black"
      names(keyvals)[keyvals == 'black'] <- "NA"
      names(keyvals)[keyvals == 'red'] <- "Unique"
      names(keyvals)[keyvals == 'blue'] <- "In multiple Pathways"

      keyvals.shape <- ifelse(
      Volcano1$Unique == "Unique", 19,
        ifelse(Volcano1$Unique == "In multiple Pathways", 18, 3))
      keyvals.shape[is.na(keyvals.shape)] <- 3
      names(keyvals.shape)[keyvals.shape == 3] <- 'NA'
      names(keyvals.shape)[keyvals.shape == 19] <- 'Unique'
      names(keyvals.shape)[keyvals.shape == 18] <- 'In multiple Pathways'
      
      if(nrow(Volcano1)>=1){
        VolcanoPlot <- EnhancedVolcano (Volcano1,
                                        lab = Volcano1$gene,#gene name
                                        x = "Log2FC",#Log2FC
                                        y = "p.adj",#p-value or q-value
                                        xlab = "Log2FC",
                                        ylab = bquote(~-Log[10]~`p.adj`),#(~-Log[10]~adjusted~italic(P))
                                        pCutoff = 0.05,
                                        FCcutoff = 0.5,
                                        pointSize = 3,
                                        labSize = 2,
                                        titleLabSize = 16,
                                        shapeCustom = keyvals.shape,
                                        colCustom = keyvals,
                                        colAlpha = 0.5,
                                        title=paste(i),
                                        subtitle=paste("NES=",GSEA_Score$NES, ", p.adj=",GSEA_Score$padj),
                                        caption = paste0("total = ", nrow(Volcano1), " genes of ", nrow(Pathway), " genes in pathway"),
                                        xlim = c((((Reduce(min,Volcano1$Log2FC))))-0.5,(((Reduce(max,Volcano1$Log2FC))))+0.5),
                                        ylim = c(0,((-log10(Reduce(min,Volcano1$p.adj))))+0.1),
                                        cutoffLineType = "dashed",
                                        cutoffLineCol = "black",
                                        cutoffLineWidth = 0.5,
                                        legendPosition = 'right',
                                        legendLabSize = 12,
                                        legendIconSize = 5.0)
        dir.create("OutputFig")
        dir.create("OutputFig/GSEA_VP_U")
        ggsave(file=paste("OutputFig/GSEA_VP_U/", i, ".pdf"), plot=VolcanoPlot, width=10, height=8)
        plot(VolcanoPlot)
      }
    }
  }
  else{
    paste("No Volcano plots generated")
  }
  #Make Lollipop graphs
  if(LollipopGraphs==TRUE){
    library(viridis)
    #Select the data to plot:
    GSEA_Select <- gsea_result%>%
      subset(padj <= Lollipop_p.adj & (NES>= Lollipop_NES | NES <= -Lollipop_NES) & Lollipop_Percentage)
    GSEA_Select$p.adj_round <- round(GSEA_Select$padj, digits = 2)
      
    #Make the plot:
    Dotplot1 <-ggplot(GSEA_Select, aes(x=reorder(pathway, + NES), y=NES, label=p.adj_round)) + 
    geom_point(stat='identity', aes(size= NES, col=padj))  +
    scale_color_viridis(option="C", "padj")+
    scale_fill_viridis(option="C","padj")+
    geom_segment(aes(y = 0, 
                   x = pathway, 
                   yend = NES,
                   xend = pathway), 
               color = "black") +
   scale_size(name="NES",range = c(2,16))+
    geom_text(color="black", size=2) +
    labs(title="GSEA",
        subtitle=paste("padj <= ",Lollipop_p.adj, " & ",-Lollipop_NES, " =>NES>= ", Lollipop_NES)) + 
    #ylim(-2.5,2.5) +
    theme_bw() +
    coord_flip()+
    theme(plot.title = element_text(color = "black", size = 12, face = "bold"),
          plot.subtitle = element_text(color = "black", size=10),
          plot.caption = element_text(color = "black",size=9, face = "italic", hjust = 2.5))+
    labs(y="NES", x="")
    
    dir.create("OutputFig")
    dir.create("OutputFig/GSEA_LG") 
    ggsave(paste("OutputFig/GSEA_LG/LG_GSEA-",LollipopName ,"_padj",Lollipop_p.adj,"NES",Lollipop_NES, ".pdf"), plot=Dotplot1, width=18, height=10)
    plot(Dotplot1)  
  }
  else{
    paste("No Lollipop graphs generated")
  }
  #Output
  Output <- gsea_result
}

#Prepare InputData
DF_Input <- DF%>%
  rename("rank"="t.ord",
         "p.adj"="q.ord")

```